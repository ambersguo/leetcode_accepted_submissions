{"id":580117084,"lang":"python3","time":"1 month, 1 week","timestamp":1635714794,"status_display":"Accepted","runtime":"332 ms","url":"/submissions/detail/580117084/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"16.7 MB","code":"from collections import defaultdict\nclass Solution:\n    def findLHS(self, nums: List[int]) -> int:\n        value2count = {}\n        value2count = defaultdict(lambda:0,value2count)\n        maxlist = []\n        for n in nums:\n            value2count[n] += 1\n        nums2 = nums\n        nums_uniq = [int(n) for n in set(nums2)]\n        nums_uniq.sort()\n        for i in range(len(nums_uniq)-1):\n            if nums_uniq[i+1] - nums_uniq[i] == 1:\n                maxlen = value2count[nums_uniq[i]] + value2count[nums_uniq[i+1]]\n                maxlist.append(maxlen)\n        maxlist.sort()\n        if maxlist:\n            return maxlist[-1]\n        else:\n            return 0\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence"}