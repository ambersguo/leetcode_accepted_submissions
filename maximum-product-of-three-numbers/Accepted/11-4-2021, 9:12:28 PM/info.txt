{"id":582227003,"lang":"python3","time":"1 month, 1 week","timestamp":1636074748,"status_display":"Accepted","runtime":"264 ms","url":"/submissions/detail/582227003/","is_pending":"Not Pending","title":"Maximum Product of Three Numbers","memory":"15.6 MB","code":"class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        nums_neg = []\n        nums_pos = []\n        for num in nums:\n            if num >= 0:\n                nums_pos.append(num)\n            else:\n                nums_neg.append(num)\n        nums_pos.sort(reverse=True)\n        nums_neg.sort()\n        if len(nums_pos) >= 3:\n            max_pos = nums_pos[0]*nums_pos[1]*nums_pos[2]\n            if len(nums_neg) >= 2:\n                max_mix = nums_neg[0]*nums_neg[1]*nums_pos[0]\n                if max_pos > max_mix:\n                    return max_pos\n                else:\n                    return max_mix\n            else:\n                return max_pos\n        elif len(nums_pos) == 2:\n            if len(nums_neg) >= 2:\n                max_mix = nums_neg[0]*nums_neg[1]*nums_pos[0]\n                return max_mix\n            else:\n                max_mix = nums_pos[0]*nums_pos[1]*nums_neg[-1]\n                return max_mix\n        elif len(nums_pos) == 1:\n            max_mix = nums_pos[0]*nums_neg[0]*nums_neg[1]\n            return max_mix\n        else:\n            max_neg = nums_neg[-1]*nums_neg[-2]*nums_neg[-3]\n            return max_neg\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-three-numbers"}